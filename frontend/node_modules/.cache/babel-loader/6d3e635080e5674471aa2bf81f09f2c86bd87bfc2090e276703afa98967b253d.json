{"ast":null,"code":"var _jsxFileName = \"/Users/tanishtyagi/Desktop/mern-chat/frontend/src/components/Chat.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport API from \"../utils/api\";\nimport { getSocket } from \"../utils/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat({\n  recipient\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [text, setText] = useState(\"\");\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const res = await API.get(`/messages/${recipient._id}`);\n      setMessages(res.data);\n    };\n    fetchMessages();\n    const socket = getSocket();\n    socket === null || socket === void 0 ? void 0 : socket.on(\"private_message\", msg => {\n      if (msg.sender === recipient._id) setMessages(prev => [...prev, msg]);\n    });\n    return () => {\n      socket === null || socket === void 0 ? void 0 : socket.off(\"private_message\");\n    };\n  }, [recipient]);\n  const sendMessage = async () => {\n    const socket = getSocket();\n    if (!text.trim()) return;\n    const msg = {\n      sender: \"me\",\n      content: text\n    };\n    setMessages(prev => [...prev, msg]);\n    socket === null || socket === void 0 ? void 0 : socket.emit(\"private_message\", {\n      recipient: recipient._id,\n      content: text\n    });\n    setText(\"\");\n    await API.post(\"/messages\", {\n      recipient: recipient._id,\n      content: text\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Chat with \", recipient.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: m.sender === \"me\" ? \"msg-me\" : \"msg-other\",\n        children: m.content\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"Q7TTAJRzFhjaM+mpF0rSeEJ6Pls=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","API","getSocket","jsxDEV","_jsxDEV","Chat","recipient","_s","messages","setMessages","text","setText","fetchMessages","res","get","_id","data","socket","on","msg","sender","prev","off","sendMessage","trim","content","emit","post","className","children","username","fileName","_jsxFileName","lineNumber","columnNumber","map","m","i","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/tanishtyagi/Desktop/mern-chat/frontend/src/components/Chat.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport API from \"../utils/api\";\nimport { getSocket } from \"../utils/socket\";\n\ninterface User { _id: string; username: string; }\ninterface Message { sender: string; content: string; }\n\nexport default function Chat({ recipient }: { recipient: User }) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [text, setText] = useState(\"\");\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const res = await API.get(`/messages/${recipient._id}`);\n      setMessages(res.data);\n    };\n    fetchMessages();\n\n    const socket = getSocket();\n    socket?.on(\"private_message\", (msg: Message) => {\n      if (msg.sender === recipient._id) setMessages(prev => [...prev, msg]);\n    });\n\n    return () => {\n      socket?.off(\"private_message\");\n    };\n  }, [recipient]);\n\n  const sendMessage = async () => {\n    const socket = getSocket();\n    if (!text.trim()) return;\n\n    const msg = { sender: \"me\", content: text };\n    setMessages(prev => [...prev, msg]);\n    socket?.emit(\"private_message\", { recipient: recipient._id, content: text });\n    setText(\"\");\n\n    await API.post(\"/messages\", { recipient: recipient._id, content: text });\n  };\n\n  return (\n    <div className=\"chat\">\n      <h3>Chat with {recipient.username}</h3>\n      <div className=\"messages\">\n        {messages.map((m, i) => (\n          <div key={i} className={m.sender === \"me\" ? \"msg-me\" : \"msg-other\"}>\n            {m.content}\n          </div>\n        ))}\n      </div>\n      <div className=\"input-box\">\n        <input value={text} onChange={e => setText(e.target.value)} placeholder=\"Type a message...\" />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}